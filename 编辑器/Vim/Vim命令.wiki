[[../../index|回首页]]
%toc

= 精简版 =

== 光标移动 ==
{{{c
    ;        重复前一次输入的f t F T 命令
    ,        反方向重复前一次输入的f t F T 命令

    * #      匹配光标所在单词移动 *到下一个 #到上一个
    Ctrl+O   到光标的上一个位置
    Ctrl+I   到光标的下一个位置
    gd       光标移动到变量的定义处

    [[       到上一个函数块的{
    ]]       到下一个函数块的{
    []       到上一个函数块的}
    ][       到下一个函数块的}
    [{       到代码块的{
    ]}       到代码块的}
  }}}

== 替换 ==
{{{c
    :s/word1/word2          将光标所在行的第一个word1替换为word2
    :s/word1/word2/g        将光标所在行的word1替换为word2
    :n1,n2s/word1/word2/g   在第n1行和n2行之间寻找word1这个字符串，并且将其替换为word2.
    :%s/word1/word2/g
  }}}

== 块操作 ==
{{{c
    0 <C-V> 开始选 I-- [ESC]   在一块的行头添加'--'
    <C-V> 开始选 $ A-- [ESC]   在一块的行尾添加'--'
  }}}

== 宏录制 ==
{{{c
    qa 把操作记录在寄存器a
    @a replay被录制的宏
    @@ replay最新录制的宏
    q 停止录制
    例:
    在一个只有一行且这一行只有"1"的文本中,键入如下命令:
    qaYp<Ctrl-A>q
    qa 开始录制
    Yp 复制行
    <Ctrl-A> 增加1
    q 停止录制
    @a 在1下面写下2
    @@ 在2下面写下3
    100@@ 会创建新的100行,并把数据增加到103
  }}}

== 分屏 ==
    {{{c
    :sp                创建水平分屏,可以接文件名
    :vsp               创建垂直分屏,可以接文件名
    <C-W>f             水平分屏打开光标所在处的文件
    <C-W><C-W>         在分屏之间切换
    <C-W><hjkl>        切换分屏。
    <C-W>_             让分屏最高
    <C-W>|             让分屏最宽
    <C-W>+ / <C-W>-    增加/减少尺寸
    <C-W>=             让窗口一样大
    <C-W><HJKL>        移动窗口
  }}}

== 代码折叠 ==
    {{{c
    zo                 打开光标位置的折叠代码；
    zc                 折叠光标位置的代码；
    zr                 将文件中所有折叠的代码打开；
    zm                 将文件中所有打开的代码折叠；
    zR                 作用和 zr 类似，但会打开子折叠（折叠中的折叠）；
    zM                 作用和 zm 类似，但会关闭子折叠；
    zi                 折叠与打开操作之间的切换命令；
  }}}

== 排序 ==

    {{{c
    :[range]sor[t][!] [i][u][r][n][x][o] [/{pattern}/]
                       给 [range] 里的行排序。如果没有给出行范围，给所有行排序。
                       带 [!] 则反向排序。
                       带 [i] 则忽略大小写。
                       带 [n] 则排序基于每行的第一个十进制数 (在 {pattern} 匹配之后或之内)。 
                       数值包含前导的 '-'。
                       带 [x] 则排序基于每行的第一个十六进制数 (在 {pattern} 匹配之后或之内)。忽略引导的 "0x" 或 "0X"。
                       数值包含前导的 '-'。
                       带 [o] 则排序基于每行的第一个八进制数 (在 {pattern} 匹配之后或之内)。
                       带 [u] 则只保留完全相同的行的第一行 (如果带 [i]，忽略 大小写的区别)。
                       没有这个标志位，完全相同的行的序列会按照它们原来的顺序被保留下来。
                       注意 引导和拖尾的空白差异会导致不相同的行。
                       如果指定 /{pattern}/ 并且没有 [r] 标志位，跳过匹配{pattern} 的文本，使得排序在匹配之后的内容上进行。
                       除了斜杠以外，任何非字母的字符都可以。
                       
                       例如，要按第二个逗号分隔的字段排序:
                               :sort /[^,]*,/
                       按虚拟第 10 列的文本排序 (从而忽略制表和空格的区别):
                               :sort /.*\%10v/
                       按每行的第一个数值排序，不管它前面有什么:
                               :sort /.\{-}\ze\d/
                       (说明: ".\{-}" 匹配任何文本，"\ze" 设置匹配结束位置，\d 匹配单个数位。)
                       带 [r] 则排序在匹配 {pattern} 的文本上进行，而不是如上所述的用它之后的文本。
                       例如，要按每行的前三个字母排序且只看这三个字母:
                               :sort /\a\a\a/ r

                       如果使用 {pattern}，不匹配 {pattern} 的行按照它们原来的顺序被保留，但和匹配 {pattern} 的行分开。如果反向排
                       序，它们会以反向顺序出现，并在排序好的行之后。否则它们会以原有顺序出现，在排序好的行之前。
                       如果 {pattern} 为空 (例如指定 //)，则使用最近使用的搜索模式。这样你可以先试好模式，然后在执行。
    注意 `:sort` 和 `:global` 一起使用并不能对匹配的行进行排序，这样做没有意义。
    排序的细节取决于使用的库函数。不能保证它是 "稳定" 排序，也不能保证排序依赖于当前的 locale。你要自己试试才知道。
    排序可以被中断，但在整个过程里如果中断得太晚，最后可能会出现重复的行。这取决于使用的系统库函数。
     }}}

== 其他 ==
    {{{c
    gU                 变大写
    gu                 变小写
    :r filename        将filename的内容插入到当前光标
    :map               列出所有键盘映射
    :nmap              列出normal模式下的键盘映射
    :nmap x            查看在normal状态下x绑定的命令
    :set all           显示目前所有的环境参数值
    :set               显示与系统默认值不同的参数值
  }}}

= 完整版 =

== 光标移动 ==
    {{{c
    h           左
    j           下
    k           上
    l           右
}}}

== 在一行中移动光标 ==
    {{{c
    0           HOME
    ^           到本行第一个非BLANK字符
    $           END
    g_          到本行最后一个非BLANK字符
    fX          FX 到X的字符处(f向后找,F向前找)
    tX          TX 到X前的字符(t向后找,T向前找)
    3fa         到第3个a处
    ;           重复前一次输入的f t F T 命令
    ,           反方向重复前一次输入的f t F T 命令
    b           B 到上一个单词的开头(b判断单词只由数字,字符和下划线组成 B判断单词由BLANK分割)
    w           W 到下一个单词的开头(w判断单词只由数字,字符和下划线组成 W判断单词由BLANK分割)
    ge gE       到上一个单词的结尾(ge判断单词只由数字,字符和下划线组成 gE判断单词由BLANK分割)
    e E         到下一个单词的结尾(e判断单词只由数字,字符和下划线组成 E判断单词由BLANK分割)
}}}


== 在一页中移动光标 ==
    {{{c
    H           到当前窗口的顶部 3H 到当前窗口顶部第三行
    M           到当前窗口的中间
    L           到当前窗口的底部 3L 到当前窗口底部向上数第三行
    NG          到第N行
    :N          到第N行
    N回车       光标向下移动N行
    gg          到第一行 相当于1G,:1
    G           到最后一行
    Ctrl+F      PageDown
    Ctrl+B      PageUp
    Ctrl+D      下翻半页
    Ctrl+U      上翻半页
    zt          把光标所在行移动到窗口的顶部
    zz          把光标所在行移动到窗口的中间
    zb          把光标所在行移动到窗口的底部
    * #         匹配光标所在单词移动 *到下一个 #到上一个
    Ctrl+O      到光标的上一个位置
    Ctrl+I      到光标的下一个位置
    gd          光标移动到变量的定义处
}}}

== 代码间移动 ==
    {{{c
    %           匹配括号移动,包括(){}[],需要先把光标移到括号上
    [[          到上一个函数块的{
    ]]          到下一个函数块的{
    []          到上一个函数块的}
    ][          到下一个函数块的}
    [{          到代码块的{
    ]}          到代码块的}
}}}

== 组合命令 ==
    {{{c
    <start position><command><end position>
    例:
    0y$         表示先到行头,开始复制,一直到行尾
    ye          表示从当前位置一直复制到本单词的最后一个字符
    y2/foo      复制两个"foo"之间的字符串(有点没懂)
    dt"         删除所有内容,直到遇到"
}}}

== 编辑模式 ==
    {{{c
    ESC         命令模式,也可以Ctrl+C Ctrl+[
    Ctrl+O      临时进入命令模式
    i a o O cw  进入Insert模式
    i           光标前插入
    I           在当前所在行第一个非BLANK字符处插入
    a           光标后插入
    A           从当前行最后一个字符处插入
    o           在当前行后插入一个新行
    O           在当前行前插入一个新行
    r           进入覆盖模式,只覆盖一次
    R           进入覆盖模式,一直覆盖,直到ESC
    cN          删除光标位置后到命令N处的字符并且进入到Insert模式
    如:
    cw          删除光标位置后到一个单词结尾的字符并且进入到Inset模式
    C           删除光标位置后所有字符并且进入到Insert模式
}}}

== 可视化选择模式 ==
    {{{c
    v           进入可视化选择模式
    V           选中一行
    在选中以后,可以:
    J           把所有的行变成一行
    < >         左右缩进
    =           自动缩进
}}}

== 查找和替换 ==
    {{{c
    :nohl                   取消查找结果高亮
    /XXX                    向下搜索XXX的字符串,如果搜索出多个结果,可按n键到下一个 N到上一个
    ?XXX                    向上搜索XXX的字符串,如果搜索出多个结果,可按n键到下一个 N到上一个
    :s/word1/word2          将光标所在行的第一个word1替换为word2
    :s/word1/word2/g        将光标所在行的word1替换为word2
    :n1,n2s/word1/word2/g   在第n1行和n2行之间寻找word1这个字符串，并且将其替换为word2.
    :1,$s/word1/word2/g     从第一行到最后一行寻找word1这个字符串，并且将其替换为word2.
    或者用
    :%s/word1/word2/g
    :1,$s/word1/word2/gc    从第一行到最后一行寻找word1这个字符串，并且将其替换为word2.且在替换前显示提示字符给用户确认是否需要替换。
}}}

== 剪切 ==
    {{{c
    d              剪切一段文本,通常需要组合命令或者选择模式下使用
    dd             剪切当前行
}}}

== 复制 ==
    {{{c
    y              复制一段文本,通常需要组合命令或者选择模式下使用
    yy             复制当前行
}}}

== 粘贴 ==
    {{{c
    P              在当前位置之前粘贴
    p              在当前位置之后粘贴
}}}

== 删除 ==
    {{{c
    x              Delete
    X              Backspace
}}}

== 撤销/重做 ==
    {{{c
    u              undo
    Ctrl+R         redo
}}}

== 重复命令 ==
    {{{c
    .              重复上一次的命令
    N<command>     重复某个命令N次 如3p,就粘贴3次 100idesu [ESC] 会写下100个"desu "
}}}

== 区域选择 ==
    {{{c
    <action>a<object>和<action>i<object>
    action可以是任何的命令,如d(剪切),y(复制),v(可视模式选择)
    object可能是:w一个单词,W一个以空格为分隔的单词,s一个句子,p一个段落,也可以是一个特别的字符" ' ) } ]
    a和i好像只有当object为" ' ) } ]时有区别,a表示选择的时候包含了object,i表示选择的时候不包含object
    例
    va{ 选定一个代码块
    ci( 删除一个()里的所有字符并进入到编辑模式
    di( 删除一个()里的所有字符不进入编辑模式
}}}

== 块操作(列模式) ==
    {{{c
    例:
    0 <Ctrl+V> <Ctrl+D> I-- [ESC]
    0 到行头
    <Ctrl+V> 开始块操作
    <Ctrl+D> 向下移动(也可以使用hjkl来移动光标,或是使用%,或是别的)
    I-- [ESC] I是插入,插入“--”,按ESC键来为每一行生效
    例:
    <Ctrl-V>
    选中相关的行(可使用 j 或 <Ctrl-D> 或是 /pattern 或是 % 等...)
    $ 到行最后
    A (a不行)输入字符串,按 ESC 

    在Windows下的vim,使用 <Ctrl-Q>而不是<Ctrl-V>,<Ctrl-V>是拷贝剪贴板
}}}

== 自动提示 ==
    {{{c
    在Insert模式下,输入一个词的开头以后按<Ctrl-N>或者<Ctrl-P>,自动补齐
}}}

== 自动修正 ==
    {{{c
    :abbr Lunix Linux 这样在输入Lunix以后会自动变成Linux
    :abbr MS Mandrake Software 用来缩写也很方便
}}}

== 宏录制 ==
    {{{c
    qa 把操作记录在寄存器a
    @a replay被录制的宏
    @@ replay最新录制的宏
    q 停止录制
    例:
    在一个只有一行且这一行只有"1"的文本中,键入如下命令:
    qaYp<Ctrl-A>q
    qa 开始录制
    Yp 复制行
    <Ctrl-A> 增加1
    q 停止录制
    @a 在1下面写下2
    @@ 在2下面写下3
    100@@ 会创建新的100行,并把数据增加到103
}}}

== 分屏 ==
    {{{c
    :split :sp                创建分屏,可以接文件名
    :vsplit :vsp              创建垂直分屏,可以接文件名
    <C-W>f                    水平分屏打开光标所在处的文件
    <C-W><C-W>                在分屏之间切换
    <Ctrl+W><dir>             dir就是方向,可以是 hjkl 或是 ←↓↑→ 中的一个,其用来切换分屏。
    <Ctrl+W>_ 或<Ctrl+W>|     最大化尺寸
    <Ctrl+W>+ (或 <Ctrl+W>-)  增加(减少)尺寸
}}}

== 分页 ==
    {{{c
    :tabnew                      新建一个分页
    :tabedit path/to/file        新建一个分页并在这个分页打开或新建一个文件 现简写为:Te
    :tabfind path/to/file        在分页文件中查询一个文件名
    Ctrl+PageUp Ctrl+PageDown    在分页之间切换
}}}

== 书签 ==
    {{{c
    Normal mode下按m<reg>作书签,<reg>指26个命名寄存器中的一个,这样,会在当前光标的位置标记一个书签,名字为 <reg>

    `a          到书签a处 注意,这个不是单引号，它一般位于大部分键盘的 1 的左边
    'a          到书签a所在的行 这里用的是单引号，将跳到书签所在的行

    `.          到上次编辑文件的地方 这个命令很有用，而且你不用自己去标记它，注意这里输入的是反引号`,精确到点
    '.          到上次编辑文件所在行 注意这里是精确到行,输入的是引号'

    '^或`^      回到最后一次插入状态返回的位置

    :marks      查看当前所有书签的列表
}}}

== 打开文件 ==
    {{{c
    :e XXX      打开一个文件
}}}

== 保存 ==
    {{{c
    :w          存盘,可以跟文件名
    :saveas XXX 另存为
}}}

== 切换文件 ==
    {{{c
    :bn         切换下一个文件
    :bp         切换上一个文件
    :n          编辑下一个文件
    :N          编辑上一个文件
    :files      列出目前vim打开的所有文件
}}}

== 退出 ==
    {{{c
    :wq :x ZZ   保存后退出
    :q!         强制退出
    :qa!        强制退出所有的正在编辑的文件
}}}

== 帮助 ==
    {{{c
    :help <command>
}}}

== 其他命令 ==
    {{{c
    v           可视化选择
    gU          变大写
    gu          变小写
    :!cmd       执行一个外部命令,如:!ls
    :r filename 将filename的内容插入到当前光标
    :map        列出所有键盘映射
    :nmap       列出normal模式下的键盘映射
    :nmap x     查看在normal状态下x绑定的命令
    :set all    显示目前所有的环境参数值
    :set        显示与系统默认值不同的参数值
}}}

== 剪贴板 ==
    {{{c
    系统粘贴板 输入模式按Shift+Insert
    vim有18个粘贴板，分别是0 1 2 ... 9 - * + . : % / 
    用:reg命令可以查看各个粘贴板里的内容
    在vim中简单用y只是复制到"（双引号)粘贴板里，同样用p粘贴的也是这个粘贴板里的内容
    要将vim的内容复制到某个粘贴板，需要选择要复制的内容，然后按 "Ny 完成复制，其中N为粘贴板号，如 "ay
    "号粘贴板（临时粘贴板）比较特殊，直接按y就复制到这个粘贴板中了，直接按p就粘贴这个粘贴板中的内容
    +号粘贴板是系统粘贴板，用 "+y 将内容复制到该粘贴板后可以使用Ctrl＋V将其粘贴到其他文档（如firefox、gedit）中
    同理，要把在其他地方用Ctrl＋C或右键复制的内容复制到vim中，需要在正常模式下按 "+p
}}}

== 高级命令 ==
    {{{c
    :set xxx                设置某个选项
    :set xxx?               查看某个选项的值
    :scriptnames            列出所有配置文件

    :help CTRL_A            查看C-a的帮助
    :help i_CTRL_A          查看插入模式下C-a的帮助
    :help -t                查看-t这个命令行参数的帮助
    :help 'number'          查看number这个选项的帮助
    :help E37               查看错误号为E37的帮助
    
    Ctrl+G                  获得当前位置信息(文件名,当前行号,总行数...)
      }}}
